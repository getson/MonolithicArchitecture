// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Infrastructure.Data;

namespace MyApp.Infrastructure.Data.Migrations.Migrations
{
    [DbContext(typeof(MyAppObjectContext))]
    [Migration("20180627235417_Second")]
    partial class Second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyApp.Core.Domain.Example.BankAccountAgg.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Iban");

                    b.Property<bool>("Locked");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.BankAccountAgg.BankAccountActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityDescription");

                    b.Property<decimal>("Amount");

                    b.Property<int>("BankAccountId");

                    b.Property<DateTime>("Date");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BankAccountActivity");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.CountryAgg.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryIsoCode");

                    b.Property<string>("CountryName");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.CustomerAgg.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company");

                    b.Property<int>("CountryId");

                    b.Property<decimal>("CreditLimit");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LastName");

                    b.Property<int?>("PictureId");

                    b.Property<string>("Telephone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PictureId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.CustomerAgg.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RawPhoto");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.OrderAgg.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("DeliveryDate");

                    b.Property<bool>("IsDelivered");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("SequenceNumberOrder");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.OrderAgg.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<decimal>("Discount");

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLine");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.ProductAgg.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountInStock");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Title");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityLogTypeId");

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int?>("EntityId");

                    b.Property<string>("EntityName")
                        .HasMaxLength(400);

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLogTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Logging.ActivityLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ActivityLogType");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Logging.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("FullMessage");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200);

                    b.Property<int>("LogLevelId");

                    b.Property<string>("PageUrl");

                    b.Property<string>("ReferrerUrl");

                    b.Property<string>("ShortMessage")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("MyApp.Core.Domain.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserName")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.ProductAgg.Software", b =>
                {
                    b.HasBaseType("MyApp.Core.Domain.Example.ProductAgg.Product");

                    b.Property<string>("LicenseCode");

                    b.ToTable("Software");

                    b.HasDiscriminator().HasValue("Software");
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.BankAccountAgg.BankAccount", b =>
                {
                    b.HasOne("MyApp.Core.Domain.Example.CustomerAgg.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("MyApp.Core.Domain.Example.BankAccountAgg.BankAccountNumber", "BankAccountNumber", b1 =>
                        {
                            b1.Property<int?>("BankAccountId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("AccountNumber");

                            b1.Property<string>("CheckDigits");

                            b1.Property<string>("NationalBankCode");

                            b1.Property<string>("OfficeNumber");

                            b1.ToTable("BankAccount");

                            b1.HasOne("MyApp.Core.Domain.Example.BankAccountAgg.BankAccount")
                                .WithOne("BankAccountNumber")
                                .HasForeignKey("MyApp.Core.Domain.Example.BankAccountAgg.BankAccountNumber", "BankAccountId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.BankAccountAgg.BankAccountActivity", b =>
                {
                    b.HasOne("MyApp.Core.Domain.Example.BankAccountAgg.BankAccount")
                        .WithMany("BankAccountActivity")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.CustomerAgg.Customer", b =>
                {
                    b.HasOne("MyApp.Core.Domain.Example.CountryAgg.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyApp.Core.Domain.Example.CustomerAgg.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.OwnsOne("MyApp.Core.Domain.Example.CustomerAgg.Address", "Address", b1 =>
                        {
                            b1.Property<int?>("CustomerId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("AddressLine1");

                            b1.Property<string>("AddressLine2");

                            b1.Property<string>("City");

                            b1.Property<string>("ZipCode");

                            b1.ToTable("Customer");

                            b1.HasOne("MyApp.Core.Domain.Example.CustomerAgg.Customer")
                                .WithOne("Address")
                                .HasForeignKey("MyApp.Core.Domain.Example.CustomerAgg.Address", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.OrderAgg.Order", b =>
                {
                    b.HasOne("MyApp.Core.Domain.Example.CustomerAgg.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("MyApp.Core.Domain.Example.OrderAgg.ShippingInfo", "ShippingInformation", b1 =>
                        {
                            b1.Property<int?>("OrderId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("ShippingAddress");

                            b1.Property<string>("ShippingCity");

                            b1.Property<string>("ShippingName");

                            b1.Property<string>("ShippingZipCode");

                            b1.ToTable("Order");

                            b1.HasOne("MyApp.Core.Domain.Example.OrderAgg.Order")
                                .WithOne("ShippingInformation")
                                .HasForeignKey("MyApp.Core.Domain.Example.OrderAgg.ShippingInfo", "OrderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("MyApp.Core.Domain.Example.OrderAgg.OrderLine", b =>
                {
                    b.HasOne("MyApp.Core.Domain.Example.OrderAgg.Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyApp.Core.Domain.Example.ProductAgg.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApp.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.HasOne("MyApp.Core.Domain.Logging.ActivityLogType", "ActivityLogType")
                        .WithMany()
                        .HasForeignKey("ActivityLogTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyApp.Core.Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApp.Core.Domain.Logging.Log", b =>
                {
                    b.HasOne("MyApp.Core.Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
