<?xml version="1.0"?>
<doc>
    <assembly>
        <name>App.WebApi</name>
    </assembly>
    <members>
        <member name="T:App.WebApi.Controllers.ProjectsController">
            [FromRoute] and [FromQuery] is added in order to generate swagger documentaion correctly until it will be fixed 
            in swagger configuration
            <summary>
            This controller contains methods for the projects
            </summary>
        </member>
        <member name="M:App.WebApi.Controllers.ProjectsController.#ctor(BinaryOrigin.SeedWork.Messages.IBus)">
            <summary>
            the controller cunstructor
            </summary>
            <param name="bus"></param>
        </member>
        <member name="M:App.WebApi.Controllers.ProjectsController.GetAll(App.Application.Queries.ProjectBC.GetProjects)">
            <summary>
            Get All projects
            </summary>
            <returns></returns>
        </member>
        <member name="M:App.WebApi.Controllers.ProjectsController.GetById(App.Application.Queries.ProjectBC.GetProject)">
            <summary>
            get project by Id
            </summary>
            <param name="queryModel"></param>
            <returns></returns>
        </member>
        <member name="M:App.WebApi.Controllers.ProjectsController.Post(App.Application.Commands.ProjectBC.AddProject)">
            <summary>
            Add a project
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:App.WebApi.Controllers.ProjectsController.Put(App.Application.Commands.ProjectBC.UpdateProject)">
            <summary>
            Update a project
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:App.WebApi.Controllers.ProjectsController.Delete(App.Application.Commands.ProjectBC.DeleteProject)">
            <summary>
            Delete a project
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:App.WebApi.Extensions.ServicesExtensions.AddDbServices(BinaryOrigin.SeedWork.Core.IEngine,App.Core.DbConfig)">
            <summary>
            Add entity framework services
            </summary>
            <param name="engine"></param>
            <param name="dbConfig"></param>
        </member>
        <member name="M:App.WebApi.Extensions.SwaggerExtensions.AddAppSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure Swagger
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:App.WebApi.Infrastructure.Authorization.HasScopeHandler">
            <summary>
            This handler will be called for evaluating if the user has the specific
            scope(permission) in its claims
            </summary>
        </member>
        <member name="M:App.WebApi.Infrastructure.Authorization.HasScopeHandler.#ctor(Microsoft.Extensions.Options.IOptions{App.Core.AuthConfig})">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:App.WebApi.Infrastructure.Authorization.HasScopeHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,App.WebApi.Infrastructure.Authorization.HasScopeRequirement)">
            <inheritdoc/>
        </member>
        <member name="M:App.WebApi.Infrastructure.Authorization.HasScopeRequirement.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="scope"></param>
        </member>
        <member name="T:App.WebApi.Infrastructure.Authorization.ScopeAuthorizationPolicyProvider">
            <summary>
            Authorization policy provider to automatically turn all permissions of a user into a ASP.NET Core authorization policy
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Authorization.DefaultAuthorizationPolicyProvider" />
        </member>
        <member name="M:App.WebApi.Infrastructure.Authorization.ScopeAuthorizationPolicyProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:App.WebApi.Infrastructure.Authorization.ScopeAuthorizationPolicyProvider"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:App.WebApi.Infrastructure.Authorization.ScopeAuthorizationPolicyProvider.GetPolicyAsync(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationPolicy" /> from the given <paramref name="policyName" />
            </summary>
            <param name="policyName">The policy name to retrieve.</param>
            <returns>
            The named <see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationPolicy" />.
            </returns>
        </member>
        <member name="M:App.WebApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add services to the application and configure service provider
            </summary>
            <param name="services">Collection of service descriptors</param>
        </member>
        <member name="M:App.WebApi.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configure the application HTTP request pipeline
            </summary>
            <param name="app"></param>
        </member>
    </members>
</doc>
